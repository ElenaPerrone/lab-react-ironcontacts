{"ast":null,"code":"var _jsxFileName = \"/home/elena/IH labs/lab-react-ironcontacts/src/Contacts.js\";\nimport React, { Component } from \"react\";\nimport contacts from \"./contacts.json\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport \"./Contacts.css\";\n\nclass Contacts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: contacts.slice(0, 5),\n      random: contacts[Math.ceil(Math.random() * contacts.length)]\n    };\n\n    this.randomizeCelebrity = () => {\n      //adds a random clbr to the table\n      let newContactsArray = this.state.contacts.filter(contact => contact.id === this.state.random.id);\n\n      if (newContactsArray.length === 0) {\n        let newArray = this.state.contacts;\n        newArray.push(this.state.random);\n        this.setState({\n          contacts: newArray,\n          random: contacts[Math.ceil(Math.random() * contacts.length)]\n        });\n      } else {\n        this.randomizeCelebrity(); //returns to the function to add a clbr\n      }\n    };\n\n    this.sortByName = () => {\n      let sortedNameArray = this.state.contacts.sort(function (a, b) {\n        if (a.name < b.name) {\n          return -1;\n        }\n\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        return 0;\n      });\n      this.setState({\n        contacts: sortedNameArray,\n        random: contacts[Math.ceil(Math.random() * contacts.length)]\n      });\n    };\n\n    this.sortByPopularity = () => {\n      let sortedPopArray = this.state.contacts.sort(function (a, b) {\n        return a - b;\n      });\n      this.setState({\n        contacts: sortedPopArray,\n        random: contacts[Math.ceil(Math.random() * contacts.length)]\n      });\n      console.log(\"Contacts -> sortByPopularity -> sortedPopArray\", sortedPopArray);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.randomizeCelebrity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, \"Add Random Celebrity\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.sortByName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"Sort alphabetically\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.sortByPopularity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \"Sort by popularity\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, \"Picture\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, \"Popularity\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, this.state.contacts.map(contact => /*#__PURE__*/React.createElement(TableRow, {\n      key: contact.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"image\",\n      src: contact.pictureUrl,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    }, contact.name), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }, contact.popularity)))))));\n  }\n\n}\n\nexport default Contacts;","map":{"version":3,"sources":["/home/elena/IH labs/lab-react-ironcontacts/src/Contacts.js"],"names":["React","Component","contacts","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Contacts","state","slice","random","Math","ceil","length","randomizeCelebrity","newContactsArray","filter","contact","id","newArray","push","setState","sortByName","sortedNameArray","sort","a","b","name","sortByPopularity","sortedPopArray","console","log","render","map","pictureUrl","popularity"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport contacts from \"./contacts.json\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport \"./Contacts.css\";\n\nclass Contacts extends Component {\n  state = {\n    contacts: contacts.slice(0, 5),\n    random: contacts[Math.ceil(Math.random() * contacts.length)]\n  };\n\n  randomizeCelebrity = () => {\n    //adds a random clbr to the table\n    let newContactsArray = this.state.contacts.filter(\n      contact => contact.id === this.state.random.id\n    );\n    if (newContactsArray.length === 0) {\n      let newArray = this.state.contacts;\n      newArray.push(this.state.random);\n      this.setState({\n        contacts: newArray,\n        random: contacts[Math.ceil(Math.random() * contacts.length)]\n      });\n    } else {\n      this.randomizeCelebrity(); //returns to the function to add a clbr\n    }\n  };\n\n  sortByName = () => {\n    let sortedNameArray = this.state.contacts.sort(function(a, b) {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    this.setState({\n      contacts: sortedNameArray,\n      random: contacts[Math.ceil(Math.random() * contacts.length)]\n    });\n  };\n\n  sortByPopularity = () => {\n    let sortedPopArray = this.state.contacts.sort(function(a, b) {\n      return a - b;\n    })\n    this.setState({\n      contacts: sortedPopArray,\n      random: contacts[Math.ceil(Math.random() * contacts.length)]\n    })\n    console.log(\"Contacts -> sortByPopularity -> sortedPopArray\", sortedPopArray)\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.randomizeCelebrity}>Add Random Celebrity</button>\n        <button onClick={this.sortByName}>\n          Sort alphabetically\n        </button>\n        <button onClick={this.sortByPopularity}>Sort by popularity</button>\n\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Picture</TableCell>\n                <TableCell align=\"center\">Name</TableCell>\n                <TableCell align=\"center\">Popularity</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.contacts.map(contact => (\n                <TableRow key={contact.id}>\n                  <TableCell align=\"center\">\n                    <img className=\"image\" src={contact.pictureUrl} alt=\"\" />\n                  </TableCell>\n                  <TableCell align=\"center\">{contact.name}</TableCell>\n                  <TableCell align=\"center\">{contact.popularity}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    );\n  }\n}\n\nexport default Contacts;\n"]},"metadata":{},"sourceType":"module"}